lerna.akka.entityreplication.raft.persistence {
  journal.plugin        = "akka-entity-replication.raft.persistence.cassandra.journal"
  snapshot-store.plugin = "akka-entity-replication.raft.persistence.cassandra.snapshot"
  query.plugin          = "akka-entity-replication.raft.persistence.cassandra.query"
}

lerna.akka.entityreplication.raft.eventsourced.persistence {
  journal.plugin = "akka-entity-replication.eventsourced.persistence.cassandra.journal"
  snapshot-store.plugin = "akka-entity-replication.eventsourced.persistence.cassandra.snapshot"
}

// The settings for Cassandra persistence plugin to handle command side
// You can set anything name for the root key of these settings
akka-entity-replication.raft.persistence.cassandra = ${akka.persistence.cassandra} {
  // Profile to use.
  // See https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/ for overriding any settings
  read-profile = "akka-entity-replication-profile"
  write-profile = "akka-entity-replication-profile"

  journal {

    // replication strategy to use.
    replication-strategy = "NetworkTopologyStrategy"

    // Replication factor list for data centers, e.g. ["dc0:3", "dc1:3"]. This setting is only used when replication-strategy is NetworkTopologyStrategy.
    // Replication factors should be 3 or more to maintain data consisstency.
    data-center-replication-factors = ["dc0:3"]

    // Name of the keyspace to be used by the journal
    keyspace = "entity_replication"
  }

  query {
    // Profile to use.
    // See https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/ for overriding any settings
    read-profile = "akka-entity-replication-profile"
  }

  snapshot {

    // Profile to use.
    // See https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/ for overriding any settings
    read-profile = "akka-entity-replication-snapshot-profile"
    write-profile = "akka-entity-replication-snapshot-profile"

    // replication strategy to use.
    replication-strategy = "NetworkTopologyStrategy"

    // Replication factor list for data centers, e.g. ["dc0:3", "dc1:3"]. This setting is only used when replication-strategy is NetworkTopologyStrategy.
    // Replication factors should be 3 or more to maintain data consisstency.
    data-center-replication-factors = ["dc0:3"]

    // Name of the keyspace to be used by the snapshot store
    keyspace = "entity_replication_snapshot"

    // Number load attempts when recovering from the latest snapshot fails yet older snapshot files are available.
    // But old snapshots should be ignored because akka-entity-replication uses only the latest snapshot.
    max-load-attempts = 1
  }
}

// The settings for Cassandra persistence plugin to handle query side
// You can set anything name for the root key of these settings
akka-entity-replication.eventsourced.persistence.cassandra = ${akka.persistence.cassandra} {
  // Profile to use.
  // See https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/ for overriding any settings
  read-profile = "akka-entity-replication-profile"
  write-profile = "akka-entity-replication-profile"

  journal {

    // replication strategy to use.
    replication-strategy = "NetworkTopologyStrategy"

    // Replication factor list for data centers, e.g. ["dc0:3", "dc1:3"]. This setting is only used when replication-strategy is NetworkTopologyStrategy.
    // Replication factors should be 3 or more to maintain data consisstency.
    data-center-replication-factors = ["dc0:3"]

    // Name of the keyspace to be used by the journal
    keyspace = "raft_commited_event"

    // Tagging to allow some RaftActor(Shard) to handle individually committed events together(No need to change)
    event-adapters {
      // ex)
      // bank-account-tagging = "com.example.BankAccountEventAdapter"
    }
    event-adapter-bindings {
      // ex)
      // "com.example.BankAccount$DomainEvent" = bank-account-tagging
    }
  }

  query {
    // Profile to use.
    // See https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/ for overriding any settings
    read-profile = "akka-entity-replication-profile"
  }

  snapshot {

    // Profile to use.
    // See https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/ for overriding any settings
    read-profile = "akka-entity-replication-snapshot-profile"
    write-profile = "akka-entity-replication-snapshot-profile"

    // Replication strategy to use.
    replication-strategy = "NetworkTopologyStrategy"

    // Replication factor list for data centers, e.g. ["dc0:3", "dc1:3"]. This setting is only used when replication-strategy is NetworkTopologyStrategy.
    // Replication factors should be 3 or more to maintain data consisstency.
    data-center-replication-factors = ["dc0:3"]

    // Name of the keyspace to be used by the snapshot store
    keyspace = "raft_commited_event_snapshot"

    // Number load attempts when recovering from the latest snapshot fails yet older snapshot files are available.
    // But old snapshots should be ignored because akka-entity-replication uses only the latest snapshot.
    max-load-attempts = 1
  }
}

// You can find reference configuration at
// https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/
// see also: https://doc.akka.io/docs/akka-persistence-cassandra/1.0.3/configuration.html#cassandra-driver-configuration
datastax-java-driver {

  // The contact points to use for the initial connection to the cluster.
  // basic.contact-points = ["127.0.0.1:9042"]

  // To limit the Cassandra hosts this plugin connects with to a specific datacenter.
  // basic.load-balancing-policy.local-datacenter = "dc0"

  profiles {

    // It is recommended to set this value.
    // For more details see https://doc.akka.io/docs/akka-persistence-cassandra/1.0.3/configuration.html#cassandra-driver-configuration
    // advanced.reconnect-on-init = true

    akka-entity-replication-profile {
      basic.request {
        // Important: akka-entity-replication recommends quorum based consistency level to remain data consistency
        consistency = LOCAL_QUORUM
        // the journal does not use any counters or collections
        default-idempotence = true
      }
    }

    akka-entity-replication-snapshot-profile {
      basic.request {
        // Important: akka-entity-replication recommends quorum based consistency level to remain data consistency
        consistency = LOCAL_QUORUM
        // the snapshot store does not use any counters or collections
        default-idempotence = true
      }
    }
  }
}
